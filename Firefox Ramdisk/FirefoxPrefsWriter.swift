import Foundation

struct FirefoxPrefsWriter {
    
    /// Writes or updates `user.js` in the given Firefox profile directory with provided prefs.
    /// It preserves existing prefs except those overridden by input prefs.
    /// Avoids duplicate headers and cleans empty lines.
    ///
    /// - Parameters:
    ///   - profilePath: Path to Firefox profile folder.
    ///   - prefs: Dictionary of pref keys and values (Bool, Int, or String).
    static func write(to profilePath: String, prefs: [String: Any]) {
        let userJSPath = (profilePath as NSString).appendingPathComponent("user.js")
        
        var existingLines = [String]()
        
        // Read existing user.js if it exists
        if let existingContent = try? String(contentsOfFile: userJSPath, encoding: .utf8) {
            existingLines = existingContent.components(separatedBy: .newlines)
        }
        
        // Prepare new content
        var newLines = [String]()
        
        for line in existingLines {
            let trimmed = line.trimmingCharacters(in: .whitespacesAndNewlines)
            
            // Skip old header lines
            if trimmed.hasPrefix("// Generated by Firefox RAM Disk App") {
                continue
            }
            
            // Skip empty lines to avoid multiple blanks
            if trimmed.isEmpty {
                continue
            }
            
            // Skip prefs keys that will be overridden by new prefs
            if let key = parsePrefKey(from: trimmed),
               prefs.keys.contains(key) {
                continue
            }
            
            newLines.append(line)
        }
        
        
        
        // Add or overwrite prefs from input dictionary
        for (key, value) in prefs {
            let prefLine: String
            switch value {
            case let stringVal as String:
                prefLine = "user_pref(\"\(key)\", \"\(stringVal)\");"
            case let boolVal as Bool:
                prefLine = "user_pref(\"\(key)\", \(boolVal ? "true" : "false"));"
            case let intVal as Int:
                prefLine = "user_pref(\"\(key)\", \(intVal));"
            default:
                continue // Ignore unsupported types
            }
            newLines.append(prefLine)
        }
        
        // Join lines with single newline, add trailing newline at end of file
        let outputContent = newLines.joined(separator: "\n") + "\n"
        
        do {
            try outputContent.write(toFile: userJSPath, atomically: true, encoding: .utf8)
            print("✅ user.js updated with new prefs.")
        } catch {
            print("❌ Failed to write user.js: \(error)")
        }
    }
    
    /// Helper: Parse pref key from a user_pref line.
    private static func parsePrefKey(from line: String) -> String? {
        // Expected format: user_pref("key", value);
        let trimmed = line.trimmingCharacters(in: .whitespacesAndNewlines)
        guard trimmed.hasPrefix("user_pref(\"") else { return nil }
        
        // Use regex for safer parsing
        let pattern = #"user_pref\("([^"]+)",\s*[^)]+\);"#
        guard let regex = try? NSRegularExpression(pattern: pattern),
              let match = regex.firstMatch(in: trimmed, range: NSRange(trimmed.startIndex..., in: trimmed)),
              let keyRange = Range(match.range(at: 1), in: trimmed) else {
            return nil
        }
        
        return String(trimmed[keyRange])
    }
}
